function ucwords (str) { return (str + '').replace(/^([a-z])|\s+([a-z])/g, function ($1) { return $1.toUpperCase(); });}
function capitalizeFirstLetter(string) { return string.charAt(0).toUpperCase() + string.slice(1);}
function numberWithCommas(x) {
	//totalAmount.toLocaleString('en-IN')
    return x.toString().split('.')[0].length > 3 ? x.toString().substring(0,x.toString().split('.')[0].length-3).replace(/\B(?=(\d{2})+(?!\d))/g, ",") + "," + x.toString().substring(x.toString().split('.')[0].length-3): x.toString();
}
function removeSpecialCharacter(string) {
//return string.replace(/[~`!@#$%^&*()+={}\[\];:\'\"<>.,\/\\\?-_]/g, '');
//str.replace(/[~`!@#$%^&*()+={}\[\];:\'\"<>.,\/\\\?-_]/g, '');
//return string.replace(/[^\w\s]/gi, '')
//return string.replace(/\W_/g, '');
return string.replace(/[\[\]']+/g, '');
}
function validateEmail(string){
	var emailCheck=/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i;
	//var emailCheck=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;
 return (emailCheck.test(string)==true) ? 1 : 0 ;
	
}
var isset = function(variable){return typeof(variable) !== "undefined" && variable !== null && variable !== '';}
function toNumber(str){ return isNaN(parseInt(str))==false ? parseInt(str) : 0; }
function toAmount(str){ return isNaN(parseFloat(str))==false ? parseFloat(str) : 0; }
function pad(num, size) { var s = "000000000" + num; return s.substr(s.length-size);}
function toFloat(str){ return isNaN(parseFloat(str))==true ? 0 : parseFloat(str); }
function toInt(str){ return isNaN(parseInt(str))==true ? 0 : parseInt(str); }
function arraySearchValue(type,list,search,field='')
{
	var response='';
	if($.isEmptyObject(list)==false && search!=='')
	{
		if(type==1)
		{
			response = $.grep(list, function(element, index) {
				var find=isset(element[field]) ? element[field] : '';
				return (find ==search);
			});
		}
		else
		{
			response =[];
			$.each(list, function(index, element) {
				var find=isset(element[field]) ? element[field] : '';
				if(find ==search) { response.push(index); }
			});	
		}
	}
	return response;
}
function arrayGetKeysValues(type,list,search)
{
	var response='';
	if($.isEmptyObject(list)==false && $.isEmptyObject(search)==false)
	{
		response =[];
		$(list).each(function(index,element){
			var rows={};
			$(search).each(function(index2,element2){
				if($.isPlainObject(element2) == true)
				{
					var field=isset(element2['field']) ? element2['field'] : '';
					var name=isset(element2['name']) ? element2['name'] : '';
					if(field!='')
					{
						var find=isset(element[field]) ? element[field] : '';
						rows[name]=find;
					}
				}
				else
				{
					
					if(element2!='')
					{
						var find=isset(element[element2]) ? element[element2] : '';
						rows[element2]=find;
					}
				}
			});
			if($.isEmptyObject(rows)==false)
			{
				response.push(rows); 
			}
		});	
		if($.isEmptyObject(response)==false)
		{	
			if(response.length<=1)
			{
				response=response[0];
			}
		}
	}
	return response;
}
function removeArrayElement(list,indexs)
{
	var response=list;
	if($.isEmptyObject(response)==false)
	{
		if(typeof indexs =="object")
		{
			$.each(indexs,function(index,value){
				response.splice(value,1);
			});
		}
		else
		{
			response.splice(indexs,1);
		}
	}
	return response;
}
function convert(oldImag, callback) {
    var img = new Image();
    img.onload = function(){
        callback(img)
    }
    img.setAttribute('crossorigin', 'anonymous');
    img.src = oldImag.src;
}
function getBase64Image(img,callback) {
    convert(img[0], function(newImg){
        var canvas = document.createElement("canvas");
        canvas.width = newImg.width;
        canvas.height = newImg.height;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(newImg, 0, 0);
        var base64=canvas.toDataURL("image/png");
        callback(base64)
    })
}
function checkURL(url,callback)
{
	try{$.ajax({ type: 'HEAD', headers: {'Access-Control-Allow-Origin': '*' },url: url,success: function() {callback(1)},error: function() {callback(-1)}});}catch (error){callback(-1)}finally { callback(-1)}

}
function toNumericArray(list)
{
	var response=0;
	if($.isArray(list) == true && $.isEmptyObject(list) == false)
	{
	const toNumbers = arr => arr.map(Number);
	response=toNumbers(list);
	}
	return response;
}
function buildOptions(options)
{
	var response='';
	var data=isset(options.data)  ? options.data : 0;
	var type=isset(options.type)  ? toNumber(options.type) : 0;
	var initalizeValue=isset(options.initalizeValue)  ? options.initalizeValue : 0;
	var disableOptions=isset(options.disableOptions)  ? options.disableOptions : 0;
	var disableOptionsStatus=$.isEmptyObject(disableOptions);
	if ($.isEmptyObject(data) == false && $.isEmptyObject(initalizeValue) == false)
	{
		var optionID=isset(initalizeValue.id)  ? initalizeValue.id : 0;
		var optionText=isset(initalizeValue.text)  ? initalizeValue.text : 0;
		var extraFields=isset(options.extraFields)  ? options.extraFields : 0;
		var extraFieldsStatus=$.isEmptyObject(extraFields);
		if($.isArray(data) == true)
		{
			$(data).each(function(i,obj){
				var id=isset(obj[optionID]) ? obj[optionID] : 0;
				var display=isset(obj[optionText]) ? obj[optionText] : '';
				var str=$('<option>').attr("value",id).text(display).data("alloe",1);
				if (extraFieldsStatus == false)
				{
					$(extraFields).each(function(i2,obj2){
						var name=isset(obj2.name) ? obj2.name : '';
						var type=isset(obj2.amount) ? obj2.amount : 0;
						var attrName=isset(obj2.attrName) ? obj2.attrName : '';
					    var extraField=isset(obj[name]) ? obj[name] : '';
						if(type==1)
						{
							extraField=toNumber(extraField);
						}
						else if(type==2)
						{
							extraField=toAmount(extraField);
						}
						if(attrName!='' && extraField!='')
						{
							str.attr('data-'+attrName,extraField);
						}
					});
				}
				if (disableOptionsStatus == false)
				{
					if($.inArray(id, disableOptions) !== -1)
					{
						str.prop("disabled",true);
					}
				}
				response+=str.prop('outerHTML');
			});
		}
		else if($.isPlainObject(data) == true)
		{
			var id=isset(obj[optionID]) ? obj[optionID] : 0;
			var display=isset(obj[optionText]) ? obj[optionText] : 0;
			var str=$('<option>').attr("value",id).text(display);
			if (extraFieldsStatus == false)
			{
				$(extraFields).each(function(i2,obj2){
					var name=isset(obj2.name) ? obj2.name : '';
					var type=isset(obj2.amount) ? obj2.amount : 0;
					var attrName=isset(obj2.attrName) ? obj2.attrName : '';
					var extraField=isset(obj[name]) ? obj[name] : '';
					if(type==1)
					{
						extraField=toNumber(extraField);
					}
					else if(type==2)
					{
						extraField=toAmount(extraField);
					}
					if(attrName!='' && extraField!='')
					{
						str.attr('data-'+attrName,extraField);
					}
				});
			}
			if (disableOptionsStatus == false)
			{
				if($.inArray(id, disableOptions) !== -1)
				{
					str.prop("disabled",true);
				}
			}
			response+=str.prop('outerHTML');
		}
	}
	return response;
}
function unique(array){
	var response=0;
	if($.isArray(array) == true && $.isEmptyObject(array) == false)
	{
    response=array.filter(function(el,index,arr){
        return index == arr.indexOf(el);
    });
	}
	/*
	function(){
  return this.filter(
      function(a){return !this[a] ? this[a] = true : false;}, {}
  );
	}
	*/
	return response;
}
function sortJson(element, prop, propType, asc) {
  switch (propType) {
    case "int":
      element = element.sort(function (a, b) {
        if (asc) {
          return (parseInt(a[prop]) > parseInt(b[prop])) ? 1 : ((parseInt(a[prop]) < parseInt(b[prop])) ? -1 : 0);
        } else {
          return (parseInt(b[prop]) > parseInt(a[prop])) ? 1 : ((parseInt(b[prop]) < parseInt(a[prop])) ? -1 : 0);
        }
      });
      break;
    default:
      element = element.sort(function (a, b) {
        if (asc) {
          return (a[prop].toLowerCase() > b[prop].toLowerCase()) ? 1 : ((a[prop].toLowerCase() < b[prop].toLowerCase()) ? -1 : 0);
        } else {
          return (b[prop].toLowerCase() > a[prop].toLowerCase()) ? 1 : ((b[prop].toLowerCase() < a[prop].toLowerCase()) ? -1 : 0);
        }
      });
  }
}
function saveAs(uri, filename) 
{
	var link = document.createElement('a');
	if (typeof link.download === 'string') {
	link.href = uri;
	link.download = filename;
	document.body.appendChild(link);
	link.click();
	document.body.removeChild(link);
	} else {
	window.open(uri);
	}
}
function IsImageOk(img) {
    if (!img.complete) {
        return false;
    }
    if ((typeof img.naturalWidth != "undefined" && img.naturalWidth == 0) || (typeof img.naturalHeight != "undefined" && img.naturalHeight == 0)) {
        return false;
    }
    return true;
}
function resizeBlock()
{
	var body=$("body");
	var navHeight=body.find("nav.navbar").height() || 0;
	var footerHeight=body.find("footer.footer").height() || 0;
	var windowHeight=$(window).height() || 0;
	if(navHeight>0)
	{
		body.find(".spaceBlock").css("height",(navHeight+30));
	}
	if(windowHeight>0)
	{
		var remianHeight=windowHeight-((navHeight*2)+30);
		body.find("section.content").css("min-height",remianHeight);
	}
}
//sortJson(people , "l_name", "string", true);
//sortJson(people , "sequence", "int", true);
/*
//var total=target.map(function(element) { var val=toNumber($(this).val());if(val!== tooth) return;return val;}).get();
 var toothList=target.map(function(element) { var val=toNumber($(this).val());return val;}).get();
*/
//buildOptions({'data':treatmentList,'type':1,'initalizeValue':{'id':'sr_no','text':'name'}});


/*document.addEventListener('contextmenu', function(e) {
  e.preventDefault();
});

document.onkeydown = function(e) {
  if(event.keyCode == 123) {
     return false;
  }
  if(e.ctrlKey && e.shiftKey && e.keyCode == 'I'.charCodeAt(0)) {
     return false;
  }
  if(e.ctrlKey && e.shiftKey && e.keyCode == 'C'.charCodeAt(0)) {
     return false;
  }
  if(e.ctrlKey && e.shiftKey && e.keyCode == 'J'.charCodeAt(0)) {
     return false;
  }
  if(e.ctrlKey && e.keyCode == 'U'.charCodeAt(0)) {
     return false;
  }
  if(e.ctrlKey && e.keyCode == 'U'.charCodeAt(0)){
    return false;
	}
	if(e.ctrlKey && e.keyCode == 'C'.charCodeAt(0)){
		return false;
	}
	if(e.ctrlKey && e.keyCode == 'X'.charCodeAt(0)){
		return false;
	}
	if(e.ctrlKey && e.keyCode == 'Y'.charCodeAt(0)){
		return false;
	}
	if(e.ctrlKey && e.keyCode == 'Z'.charCodeAt(0)){
		return false;
	}
	if(e.ctrlKey && e.keyCode == 'V'.charCodeAt(0)){
		return false;
	}
	if (e.keyCode == 67 && e.shiftKey && (e.ctrlKey || e.metaKey)){
		return false;
	}
	if (e.keyCode == 'J'.charCodeAt(0) && e.altKey && (e.ctrlKey || e.metaKey)){
		return false;
	}
	if (e.keyCode == 'I'.charCodeAt(0) && e.altKey && (e.ctrlKey || e.metaKey)){
		return false;
	}
	if ((e.keyCode == 'V'.charCodeAt(0) && e.metaKey) || (e.metaKey && e.altKey)){
		return false;
	}
	if (e.ctrlKey && e.shiftKey && e.keyCode == 'C'.charCodeAt(0)){
		return false;
	}
	if(e.ctrlKey && e.keyCode == 'S'.charCodeAt(0)){
		return false;
	}
	if(e.ctrlKey && e.keyCode == 'H'.charCodeAt(0)){
		return false;
	}
	if(e.ctrlKey && e.keyCode == 'A'.charCodeAt(0)){
		return false;
	}
	if(e.ctrlKey && e.keyCode == 'F'.charCodeAt(0)){
		return false;
	}
	if(e.ctrlKey && e.keyCode == 'E'.charCodeAt(0)){
		return false;
	}
  
}


if (document.addEventListener) {
    document.addEventListener('contextmenu', function(e) {
    e.preventDefault();
    }, false);
}else{
    document.attachEvent('oncontextmenu', function() {
    window.event.returnValue = false;
    });
}

window.addEventListener("keydown", (event) => {
  if(event.ctrlKey && (event.key === "S" || event.key === "s")) {
     event.preventDefault();
     body[0].innerHTML = "sorry, you can't do this 💔"
  }

  if(event.ctrlKey && (event.key === "C")) {
     event.preventDefault();
     body[0].innerHTML = "sorry, you can't do this 💔"
  }
  if(event.ctrlKey && (event.key === "E" || event.key === "e")) {
     event.preventDefault();
     body[0].innerHTML = "sorry, you can't do this 💔"
  }
  if(event.ctrlKey && (event.key === "I" || event.key === "i")) {
     event.preventDefault();
     body[0].innerHTML = "sorry, you can't do this 💔";
  }
  if(event.ctrlKey && (event.key === "K" || event.key === "k")) {
     event.preventDefault();
     body[0].innerHTML = "sorry, you can't do this 💔";
  }
  if(event.ctrlKey && (event.key === "U" || event.key === "u")) {
     event.preventDefault();
     body[0].innerHTML = "sorry, you can't do this 💔";
  }
});

if (document.addEventListener) {
    document.addEventListener('contextmenu', function(e) {
      alert("You Can not Do This!");
      e.preventDefault();
    }, false);
  } else {
    document.attachEvent('oncontextmenu', function() {
      alert("You Can not Do This!");
      window.event.returnValue = false;
    });
  }
  */
$(document).ready(function(e){

	
/*$(document).bind("contextmenu",function(e) {
  e.preventDefault();
});
$(document).keydown(function(e){
  if(e.which === 123){
    return false;
	}
	else if (e.ctrlKey && e.shiftKey) {
	return false;
	}
	else if (e.ctrlKey && e.shiftKey && e.keyCode == 73) {
       alert("You Can not Do This!");
       e.preventDefault();
      return false;
    }
	else if (e.ctrlKey && e.keyCode == 85) {
	return false;
	}
});	*/
	
resizeBlock();
$(window).resize(function() {   resizeBlock(); });	
/*
if(interval1>0)
{
clearInterval(interval1);
}
var total_interval=60;
interval1=setInterval(function(){ 
var parent=$("form[name='login-form']") || 0;
parent.find("button[name='send_link']").prop("disabled",true).addClass('px-3').html('<i class="far fa-clock"></i> 00: '+ pad(total_interval,2)+' s');
total_interval--;
},1000);
setTimeout(function(t){ 
clearInterval(interval1);
var parent=$("form[name='login-form']") || 0;
parent.find("button[name='send_link']").prop("disabled",false).removeClass('px-3').html('Resend Link');
},60000);
*/
//($.inArray("test", myarray) !== -1)
//$.isArray(data) == true || $.isEmptyObject(data) == false || isPlainObject()==false
/*$.ajax({
url: "popup",
type: "POST",
timeout: 5000,
data: {'testID': testId,'testName': testName,action: "defaultTestDetails"},
cache: false,
success: function(data) {},
error: function() {},
beforeSend: function() {},
}).done(function (data, textStatus, jqXHR) {
			console.log(textStatus);
		})
		.fail(function (jqXHR, textStatus, errorThrown) {
			console.log(textStatus);
		})
		.always(function(jqXHR, textStatus, errorThrown) {
			console.log(textStatus);
		});*/
/*
$.ajax({
url: "reportdetails.add",
type: "POST",
data: new FormData(this),
contentType: false,
cache: false,
processData: false,
success: function(data) {},
error: function() {},
beforeSend: function() {},
});
*/

$("body").on("click",".unselectable",function(e){
	var t=$(this);
	t.css({pointerEvents: "none"});
});	

$("body").on("keypress",".onlyNumber",function(e){
var t=$(this);
var type=toNumber(t.attr("data-type") || 0);
var keycode=e.keyCode || e.which || e.charCode ;
if(type==1){if((keycode < 48 ||  keycode > 57) &&  keycode!=46){return false;}return true;}
else{if(keycode < 48 ||  keycode > 57){return false;}return true;}
});
$("body").on("paste drop copy",".onlyNumber",function(e){ return false; });

	
$("button.c-header-toggler.c-class-toggler[data-target='#sidebar']").on("click",function(e){
	var t=$(this);
	var className=t.attr("data-class") || '';
	if(className!='')
	{
		$(".c-sidebar").toggleClass(className);
	}
});
$("button.c-sidebar-minimizer.c-class-toggler").on("click",function(e){
	var t=$(this);
	var className=t.attr("data-class") || '';
	if(className!='')
	{
		$(".c-sidebar").toggleClass(className);
	}
});
$("ul.c-sidebar-nav li").on("click",function(e){
	var t=$(this);
	if(t.hasClass('c-sidebar-nav-dropdown')==true)
	{
		$("ul.c-sidebar-nav li").not(t).removeClass("c-show");
		t.toggleClass('c-show');
	}
});

$("body").click(function(e) {
var type=($(e.target).parents('.c-sidebar').length>0) ? 1 : 0;
//console.log(type);
if ( type==0) {
	//console.log('1');
	var Clsstatus=($(".c-sidebar").hasClass('c-sidebar-show')==true) ? 1 : 0;
	//console.log($(".c-sidebar").is(':visible'));
	 //$(".c-sidebar:visible").hide();
	 if(Clsstatus==1 && $(e.target).hasClass('c-header-toggler')==false)
	 {
	 
	 $('.c-sidebar').removeClass("c-sidebar-show")
	 }
}
});

});